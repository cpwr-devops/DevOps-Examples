trigger: none

pool:
  name: 'Default'

# Constants
variables:
  azureRestAddress: 'https://vsrm.dev.azure.com'
  azureOrganization: 'ralphnuesse'
  azureProject: 'ralphnuesse'
  releaseDefinitionId: '1'
  agentScriptsPath: 'C:\Users\cwde-rnuesse.EMEA\Software\Azure_DevOps_Scripts'
  workspaceRoot: 'C:\Users\cwde-rnuesse.EMEA\Software\Azure_DevOps_Workspace'
  hostUri: 'cwcc.compuware.com'
  hostPort: '16196'
  hostCodePage: '1047'
  ispwConfig: 'ispw'
  ispwServer: 'ispw'
  cesUrl: 'cwcc.compuware.com:2020'
  gitProject: 'ralphnuessecpwr'
  gitRepo: 'FTSDEMO_$(ispwApplication)_Unit_Tests'
  cliPath: 'C:\Users\cwde-rnuesse.EMEA\Software\Compuware\TopazCLI'
  ccRepo: 'HDDRXM0.DEMO.COCO.REPOS'
  ccSystem: 'AZURE_$(ispwContainerName)'
  ccTestId: 'BUILD'
  ccDdio: 'SALESSUP.$(ispwApplication).$(ispwLevel).LOAD.SSD'
  sonarScannerPath: 'C:\Users\cwde-rnuesse.EMEA\Software\Sonar\Scanner\bin'
  sonarProjectName: 'RNU_$(ispwApplication)_Azure'
  sonarSources: '.\$(ispwApplication)\MF_Source'
  sonarServer: 'http://sonarqube.nasa.cpwr.corp:9000'

# Additional Variables are defined in the UI
# Parameters to be set at runtime, e.g. via REST call
#   ispwApplication     ISPW Application Name
#   ispwContainerName   ISPW Container Id
#   ispwContainerType   ISPW Container Type 0, 1, 2
#   ispwLevel           ISPW Level from which the source was promoted
#
# Additional constants are defined in the UI as "secrect"
#   azureRestAuthorization    Personal Access Token for Azure DevOps
#   cesToken                  Security Token defined in CES 
#   hostPassword              Host password
#   hostUser                  Host user id
#   sonarAuthorization        SonarQube access token

stages:
- stage: preparation
  displayName: Preparation
  jobs:
  - job: getAssets
    displayName: Get Assets from Mainframe and GitHub
    steps:
    # After promote ISPW passes the DEV level name, we need the QA level name, though
    # Determine QA level name from DEV level name and create a new pipeline variable
    - task: PowerShell@2
      name: setTargetLevel
      inputs:
        targetType: 'inline'
        script: |
          $ispwTargetLevel = 'QA' + '$(ispwLevel)'.Substring('$(ispwLevel)'.Length - 1, 1)
          Write-Host 'Determined Level ' $ispwTargetLevel
          echo "##vso[task.setvariable variable=ispwTargetLevel]$ispwTargetLevel"

    # Execute Powershell Script to clear Workspace
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\Clear_Workspace.ps1'
        arguments: '$(workspaceRoot)'

    # Execute Powershell Script to download sources from ISPW
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\ISPW_Download_Container.ps1'
        arguments: '$(workspaceRoot) $(hostUri) $(hostPort) $(hostUser) $(hostPassword) $(hostCodePage) $(ispwConfig) $(ispwContainerName) $(ispwContainerType) $(ispwTargetLevel) $(cliPath)'

    # Execute Powershell Script to clone TTT Assets from GitHub repo
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\Git_Clone_TTT_Repo.ps1'
        arguments: '$(workspaceRoot) $(gitProject)/$(gitRepo)'

- stage: tests
  displayName: Tests
  jobs:
  - job: runTests
    displayName: Run unit tests and get results
    steps:
    # Execute Powershell Script to run unit tests
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\TTT_Run_Tests.ps1'
        arguments: '$(workspaceRoot) $(hostUri) $(hostPort) $(hostUser) $(hostPassword) $(hostCodePage) $(ispwApplication) $(ispwLevel) $(ccRepo) $(ccSystem) $(ccTestId) $(cliPath)'

    # Execute Powershell Script to download Code Coverage results
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\Code_Coverage_Download_Metrics.ps1'
        arguments: '$(workspaceRoot) $(hostUri) $(hostPort) $(hostUser) $(hostPassword) $(hostCodePage) $(ispwApplication) $(ccRepo) $(ccSystem) $(ccTestId) $(ccDdio) $(cliPath)'

- stage: qualityGate
  displayName: Quality Gate
  jobs:
  - job: sonar
    displayName: run Sonar Scan, Check Quality Gate
    steps:
    # Execute Powershell Script to run Sonar Scanner
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\Sonar_Scan.ps1'
        arguments: '$(workspaceRoot) $(ispwApplication) $(sonarProjectName) $(sonarSources)'

  - job: checkQualityGate
    displayName: Check Quality Gate
    dependsOn: sonar
    steps:
    # Execute Powershell Script to check Sonar Quality Gate
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\Sonar_Check_Quality_Gate.ps1'
        arguments: '$(sonarServer) $(sonarProjectName) $(sonarAuthorization)'

  - job: triggerRelease
    displayName: Trigger Release Pipeline
    dependsOn: 
    - checkQualityGate
    condition: succeeded('checkQualityGate')
    steps:
    # After promote ISPW passes the DEV level name, we need the QA level name, though
    # Determine QA level name from DEV level name and create a new pipeline variable
    - task: PowerShell@2
      name: setTargetLevel
      inputs:
        targetType: 'inline'
        script: |
          $ispwTargetLevel = 'QA' + '$(ispwLevel)'.Substring('$(ispwLevel)'.Length - 1, 1)
          Write-Host 'Determined Level ' $ispwTargetLevel
          echo "##vso[task.setvariable variable=ispwTargetLevel]$ispwTargetLevel"
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\Azure_Trigger_Release.ps1'
        arguments: '$(azureRestAddress) $(azureOrganization) $(azureProject) "$(azureRestAuthorization)" $(ispwApplication) $(ispwContainerName) $(ispwContainerType) $(ispwTargetLevel) $(releaseDefinitionId)'

  - job: regressAssignment
    dependsOn: 
    - checkQualityGate
    condition: failed('checkQualityGate')
    steps:
    # After promote ISPW passes the DEV level name, we need the QA level name, though
    # Determine QA level name from DEV level name and create a new pipeline variable
    - task: PowerShell@2
      name: setTargetLevel
      inputs:
        targetType: 'inline'
        script: |
          $ispwTargetLevel = 'QA' + '$(ispwLevel)'.Substring('$(ispwLevel)'.Length - 1, 1)
          Write-Host 'Determined Level ' $ispwTargetLevel
          echo "##vso[task.setvariable variable=ispwTargetLevel]$ispwTargetLevel"
    - task: PowerShell@2
      inputs:
        filePath: '$(agentScriptsPath)\ISPW_Operations.ps1'
        arguments: 'ContainerOperation $(cesUrl) $(ispwConfig) assignments regress $(ispwContainerName) $(ispwTargetLevel) $(cesToken) FTSDEMO $(ispwApplication) $(ispwServer)'